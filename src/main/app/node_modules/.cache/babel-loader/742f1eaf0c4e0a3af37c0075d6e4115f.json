{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\n\nconst useFetch = (url, setData) => {\n  _s();\n\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    (async () => {\n      try {\n        const res = await fetch(url);\n        const resJson = await res.json();\n        setData(resJson);\n      } catch (err) {\n        setError(err);\n      } finally {\n        setLoading(false);\n      }\n    })();\n  }, [url, setData]);\n  return {\n    loading,\n    error\n  };\n};\n\n_s(useFetch, \"zo7N9FzgAciPmV+0AfQW8Vdw9XM=\");\n\nexport default useFetch;","map":{"version":3,"sources":["/home/superuserminho/projects/2021capstone/merging/hha-react/src/utils/useFetch.hook.js"],"names":["useState","useEffect","useFetch","url","setData","error","setError","loading","setLoading","res","fetch","resJson","json","err"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,QAAQ,GAAG,CAACC,GAAD,EAAMC,OAAN,KAAkB;AAAA;;AACjC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,IAAD,CAAtC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,KAAC,YAAY;AACX,UAAI;AACF,cAAMQ,GAAG,GAAG,MAAMC,KAAK,CAACP,GAAD,CAAvB;AACA,cAAMQ,OAAO,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAtB;AACAR,QAAAA,OAAO,CAACO,OAAD,CAAP;AACD,OAJD,CAIE,OAAOE,GAAP,EAAY;AACZP,QAAAA,QAAQ,CAACO,GAAD,CAAR;AACD,OAND,SAMU;AACRL,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF,KAVD;AAWD,GAZQ,EAYN,CAACL,GAAD,EAAMC,OAAN,CAZM,CAAT;AAaA,SAAO;AAAEG,IAAAA,OAAF;AAAWF,IAAAA;AAAX,GAAP;AACD,CAlBD;;GAAMH,Q;;AAmBN,eAAeA,QAAf","sourcesContent":["import { useState, useEffect } from 'react';\n\nconst useFetch = (url, setData) => {\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const res = await fetch(url);\n        const resJson = await res.json();\n        setData(resJson);\n      } catch (err) {\n        setError(err);\n      } finally {\n        setLoading(false);\n      }\n    })();\n  }, [url, setData]);\n  return { loading, error };\n};\nexport default useFetch;\n"]},"metadata":{},"sourceType":"module"}